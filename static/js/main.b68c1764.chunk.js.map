{"version":3,"sources":["components/Loading.js","components/Searchbar.js","App.js","serviceWorker.js","components/Recipe.js","components/RecipeListItem.js","components/RecipeList.js","components/Search.js","index.js"],"names":["Loading","isLoading","className","Spinner","animation","role","variant","withRouter","props","useState","setRecipes","setText","query","setQuery","setSearched","setLoading","APP_ID","apiKeys","appId","APP_KEY","appKey","useEffect","length","search","document","activeElement","blur","fetch","then","result","json","data","console","log","hits","history","push","pathname","state","recipes","searched","text","value","onChange","e","target","type","placeholder","onKeyPress","key","onClick","icon","faSearch","App","Boolean","window","location","hostname","match","Recipe","label","ingredientLines","map","row","i","src","image","alt","RecipeListItem","to","toLowerCase","replace","RecipeList","item","recipe","Search","routing","StrictMode","exact","path","component","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b68c1764.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst Loading = ({ isLoading }) => {\r\n\r\n    return (\r\n        <div className=\"text-center my-3\">\r\n            { isLoading ? \r\n                <Spinner \r\n                    animation=\"grow\" \r\n                    role=\"status\" \r\n                    variant=\"info\">\r\n                </Spinner>\r\n            : \"\" }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Loading;","import React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport apiKeys from \"../assets/keys.json\";\r\nimport Loading from \"./Loading\";\r\nimport { withRouter} from 'react-router-dom';\r\n\r\nconst Searchbar = (props) => {\r\n\r\n    const [recipes, setRecipes] = useState([]);\r\n\tconst [text, setText] = useState(\"\");\r\n\tconst [query, setQuery] = useState(\"\");\r\n\tconst [searched, setSearched] = useState(false);\r\n\tconst [isLoading, setLoading] = useState(false);\r\n\r\n    const APP_ID = apiKeys.appId;\r\n\tconst APP_KEY = apiKeys.appKey;\r\n    const baseUrl = \"https://api.edamam.com/search\";\r\n    \r\n    useEffect(() => {\r\n        if (props.query && props.query.length > 0) {\r\n            setQuery(props.query);\r\n        }\r\n    }, []);\r\n\r\n    const enterPress = e => {\r\n        if (e.key === \"Enter\") search(query);\r\n    }\r\n\r\n    const updateValue = e => {\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    const search = (query) => {\r\n\t\tdocument.activeElement.blur();\r\n\t\tsetLoading(true);\r\n\t\tfetch(`${baseUrl}?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`).then(result => {\r\n\t\t\tresult.json().then(data => {\r\n\t\t\t\tconsole.log(data.hits);\r\n\t\t\t\tsetRecipes(data.hits);\r\n\t\t\t\tsetText(query);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetSearched(true);\r\n\t\t\t\tprops.history.push({\r\n\t\t\t\t\tpathname: \"/search\",\r\n\t\t\t\t\tsearch: `?q=${query}`,\r\n\t\t\t\t\tstate: {\r\n\t\t\t\t\t\trecipes: data.hits, \r\n\t\t\t\t\t\tsearched: true, \r\n\t\t\t\t\t\ttext: query\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t})\r\n\t}\r\n\r\n    return (\r\n        <div className=\"my-5\">\r\n            <div className=\"form-inline\">\r\n                <input className=\"search-bar form-control mr-1 w-50\" value={query} onChange={updateValue} type=\"search\" placeholder=\"Search...\" onKeyPress={enterPress} />\r\n                <button className=\"search-btn btn btn-outline-info\" type=\"button\" onClick={() => search(query)}>\r\n                    <FontAwesomeIcon icon={faSearch} />\r\n                </button>\r\n            </div>\r\n            <Loading isLoading={isLoading} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default withRouter(Searchbar);","import React, { useEffect } from 'react';\nimport './App.scss';\nimport Searchbar from './components/Searchbar';\n\nconst App = () => {\n\t\n\tuseEffect(() => {\n\t\tconsole.log(\"mounted app.js\");\n\t}, []);\n\n\treturn <Searchbar />;\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Recipe = (props) => {\r\n\r\n    console.log(props);\r\n    const data = props.location.query ? props.location.query.data : {};\r\n\r\n    return(\r\n        <div className=\"recipe-view mt-10vh\">\r\n            <h1>{ data.label }</h1>\r\n            <hr />\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <ul>\r\n                        {data.ingredientLines && data.ingredientLines.length > 0 ? \r\n                            data.ingredientLines.map((row, i) => (\r\n                                <li key={i}>{ row }</li>\r\n                            ))\r\n                        : \"\"}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <img src={data.image} alt={data.label} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe;","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst RecipeListItem = ({ data }) => {\r\n\r\n    return (\r\n        \r\n        <div className=\"col-md-4 my-4 recipeInList\">\r\n            <Link to={{pathname: `/recipe/${data.label.toLowerCase().replace(/ /g, \"-\")}`, query: { data }}}>\r\n                <img className=\"img img-thumbnail\" src={data.image} alt={data.label} />\r\n                <h5 className=\"recipe-title\">{ data.label }</h5>\r\n            </Link>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default RecipeListItem;","import React from \"react\";\r\nimport RecipeListItem from './RecipeListItem';\r\n\r\nconst RecipeList = ({ recipes, searched, text }) => {\r\n\r\n    return (\r\n        <div>\r\n            { searched ? \r\n                <h4 className=\"mt-5\">Search results for: { text }</h4> \r\n            : \"\" }\r\n            \r\n            <div className=\"my-3 row\">\r\n                { searched && recipes.length > 0 ? \r\n                    recipes.map((item, i) => (\r\n                        <RecipeListItem data={item.recipe} key={i} />\r\n                    )) \r\n                : searched && recipes.length === 0 ? <h5>No results</h5> : \"\"}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RecipeList;","import React from \"react\";\r\nimport RecipeList from './RecipeList';\r\nimport Searchbar from \"./Searchbar\";\r\n\r\nconst Search = (props) => {\r\n\r\n    console.log(props.location.state);\r\n\r\n    const recipes = props.location.state.recipes;\r\n    const searched = props.location.state.searched;\r\n    const text = props.location.state.text;\r\n\r\n    return (\r\n        <div>\r\n            <Searchbar query={text} />\r\n            <RecipeList recipes={recipes} searched={searched} text={text} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, Route, BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Recipe from './components/Recipe';\nimport Search from './components/Search';\n\nconst routing = (\n\t<React.StrictMode>\n\t\t<Router>\n\t\t\t<div className=\"main\">\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={App} />\n\t\t\t\t\t<Route path=\"/search\" component={Search} />\n\t\t\t\t\t<Route path=\"/recipe/:name\" component={Recipe} />\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t</React.StrictMode>\n)\n\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}