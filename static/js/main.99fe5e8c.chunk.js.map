{"version":3,"sources":["components/Searchbar.js","components/Loading.js","components/Recipe.js","components/RecipeList.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","search","query","setQuery","className","value","onChange","e","target","type","placeholder","onKeyPress","key","onClick","icon","faSearch","Loading","isLoading","Spinner","animation","role","variant","Recipe","data","src","image","alt","label","RecipeList","recipes","searched","text","length","map","item","i","recipe","App","APP_ID","apiKeys","appId","APP_KEY","appKey","useState","setRecipes","setText","setSearched","setLoading","useEffect","console","log","document","activeElement","blur","fetch","then","result","json","hits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQAyBeA,EArBG,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAUhC,OACI,yBAAKC,UAAU,eACX,2BAAOA,UAAU,oCAAoCC,MAAOH,EAAOI,SANvD,SAAAC,GAChBJ,EAASI,EAAEC,OAAOH,QAK4EI,KAAK,SAASC,YAAY,YAAYC,WAVrH,SAAAJ,GACD,UAAVA,EAAEK,KAAiBX,EAAOC,MAU1B,4BAAQE,UAAU,kCAAkCK,KAAK,SAASI,QAAS,kBAAMZ,EAAOC,KACpF,kBAAC,IAAD,CAAiBY,KAAMC,S,eCCxBC,EAhBC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAEf,OACI,yBAAKb,UAAU,oBACTa,EACE,kBAACC,EAAA,EAAD,CACIC,UAAU,OACVC,KAAK,SACLC,QAAQ,SAEd,KCACC,EAXA,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEd,OACI,yBAAKnB,UAAU,8BACX,yBAAKA,UAAU,oBAAoBoB,IAAKD,EAAKE,MAAOC,IAAKH,EAAKI,QAC9D,wBAAIvB,UAAU,gBAAiBmB,EAAKI,SCgBjCC,EApBI,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KAErC,OACI,6BACMD,EACE,wBAAI1B,UAAU,QAAd,uBAA2C2B,GAC7C,GAEF,yBAAK3B,UAAU,YACT0B,GAAYD,EAAQG,OAAS,EAC3BH,EAAQI,KAAI,SAACC,EAAMC,GAAP,OACR,kBAAC,EAAD,CAAQZ,KAAMW,EAAKE,OAAQxB,IAAKuB,OAEtCL,GAA+B,IAAnBD,EAAQG,OAAe,0CAAsB,MC+B5DK,EAxCH,WAEX,IAAMC,EAASC,EAAQC,MACjBC,EAAUF,EAAQG,OAHP,EAMaC,mBAAS,IANtB,mBAMVd,EANU,KAMDe,EANC,OAOOD,mBAAS,IAPhB,mBAOVZ,EAPU,KAOJc,EAPI,OAQSF,mBAAS,IARlB,mBAQVzC,EARU,KAQHC,EARG,OASewC,oBAAS,GATxB,mBASVb,EATU,KASAgB,EATA,OAUeH,oBAAS,GAVxB,mBAUV1B,EAVU,KAUC8B,EAVD,KAYjBC,qBAAU,WACTC,QAAQC,IAAI,iBACV,IAgBH,OACC,yBAAK9C,UAAS,gBAAuB,IAAb0B,EAAoB,UAAY,KACvD,kBAAC,EAAD,CAAW7B,OAhBE,SAACC,GACfiD,SAASC,cAAcC,OACvBN,GAAW,GACXO,MAAM,GAAD,OAfU,gCAeV,cAAiBpD,EAAjB,mBAAiCoC,EAAjC,oBAAmDG,IAAWc,MAAK,SAAAC,GACvEA,EAAOC,OAAOF,MAAK,SAAAhC,GAClB0B,QAAQC,IAAI3B,EAAKmC,MACjBd,EAAWrB,EAAKmC,MAChBb,EAAQ3C,GACR6C,GAAW,GACXD,GAAY,UAOc5C,MAAOA,EAAOC,SAAUA,IACnD,kBAAC,EAAD,CAASc,UAAWA,IACpB,kBAAC,EAAD,CAAYY,QAASA,EAASC,SAAUA,EAAUC,KAAMA,MC7BvC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.99fe5e8c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Searchbar = ({ search, query, setQuery }) => {\r\n\r\n    const enterPress = e => {\r\n        if (e.key === \"Enter\") search(query);\r\n    }\r\n\r\n    const updateValue = e => {\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-inline\">\r\n            <input className=\"search-bar form-control mr-1 w-50\" value={query} onChange={updateValue} type=\"search\" placeholder=\"Search...\" onKeyPress={enterPress} />\r\n            <button className=\"search-btn btn btn-outline-info\" type=\"button\" onClick={() => search(query)}>\r\n                <FontAwesomeIcon icon={faSearch} />\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Searchbar;","import React from \"react\";\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nconst Loading = ({ isLoading }) => {\r\n\r\n    return (\r\n        <div className=\"text-center my-3\">\r\n            { isLoading ? \r\n                <Spinner \r\n                    animation=\"grow\" \r\n                    role=\"status\" \r\n                    variant=\"info\">\r\n                </Spinner>\r\n            : \"\" }\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Loading;","import React from \"react\";\r\n\r\nconst Recipe = ({ data }) => {\r\n\r\n    return (\r\n        <div className=\"col-md-4 my-4 recipeInList\">\r\n            <img className=\"img img-thumbnail\" src={data.image} alt={data.label} />\r\n            <h5 className=\"recipe-title\">{ data.label }</h5>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Recipe;","import React from \"react\";\r\nimport Recipe from './Recipe';\r\n\r\nconst RecipeList = ({ recipes, searched, text }) => {\r\n\r\n    return (\r\n        <div>\r\n            { searched ? \r\n                <h4 className=\"mt-5\">Search results for: { text }</h4> \r\n            : \"\" }\r\n            \r\n            <div className=\"my-3 row\">\r\n                { searched && recipes.length > 0 ? \r\n                    recipes.map((item, i) => (\r\n                        <Recipe data={item.recipe} key={i} />\r\n                    )) \r\n                : searched && recipes.length === 0 ? <h5>No results</h5> : \"\"}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default RecipeList;","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport Searchbar from './components/Searchbar';\nimport apiKeys from \"./assets/keys.json\";\nimport Loading from './components/Loading';\nimport RecipeList from './components/RecipeList';\n\nconst App = () => {\n\n\tconst APP_ID = apiKeys.appId;\n\tconst APP_KEY = apiKeys.appKey;\n\tconst baseUrl = \"https://api.edamam.com/search\";\n\n\tconst [recipes, setRecipes] = useState([]);\n\tconst [text, setText] = useState(\"\");\n\tconst [query, setQuery] = useState(\"\");\n\tconst [searched, setSearched] = useState(false);\n\tconst [isLoading, setLoading] = useState(false);\n\t\n\tuseEffect(() => {\n\t\tconsole.log(\"EFFECT RUNS\");\n\t}, []);\n\n\tconst search = (query) => {\n\t\tdocument.activeElement.blur();\n\t\tsetLoading(true);\n\t\tfetch(`${baseUrl}?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`).then(result => {\n\t\t\tresult.json().then(data => {\n\t\t\t\tconsole.log(data.hits);\n\t\t\t\tsetRecipes(data.hits);\n\t\t\t\tsetText(query);\n\t\t\t\tsetLoading(false);\n\t\t\t\tsetSearched(true);\n\t\t\t});\n\t\t})\n\t}\n\n\treturn (\n\t\t<div className={`main ${searched === true ? \"mt-10vh\" : \"\"}`}>\n\t\t\t<Searchbar search={search} query={query} setQuery={setQuery} />\n\t\t\t<Loading isLoading={isLoading} />\n\t\t\t<RecipeList recipes={recipes} searched={searched} text={text} />\n\t\t</div>\n\t);\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}